#include <stdio.h>
#include <stdlib.h>
#define EMPTY -1

void initializeHashTable(int hashTable[], int size) {
    for (int i = 0; i < size; i++) {
        hashTable[i] = EMPTY; 
    }
}

int hashFunction(int key, int size) {
    return key % size;
}

void insert(int hashTable[], int size, int key) {
    int address = hashFunction(key, size);

    while (hashTable[address] != EMPTY) {
        address = (address + 1) % size;     }

    hashTable[address] = key; 
}
int search(int hashTable[], int size, int key) {
    int address = hashFunction(key, size);
    int startAddress = address; 
    while (hashTable[address] != EMPTY) {
        if (hashTable[address] == key) {
            return address;         }
        address = (address + 1) % size;
        if (address == startAddress) {
            break;
        }
    }

    return -1; }

void displayHashTable(int hashTable[], int size) {
    printf("\nHash Table:\n");
    for (int i = 0; i < size; i++) {
        if (hashTable[i] == EMPTY) {
            printf("Slot %d: EMPTY\n", i);
        } else {
            printf("Slot %d: %d\n", i, hashTable[i]);
        }
    }
}

int main() {
    int m; 
    int n;
    printf("Enter the number of memory locations in the hash table (m): ");
    scanf("%d", &m);

    printf("Enter the number of keys (n): ");
    scanf("%d", &n);

    int hashTable[m];
    initializeHashTable(hashTable, m);

    int keys[n];
    printf("Enter the %d keys (4-digit integers):\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &keys[i]);
        insert(hashTable, m, keys[i]);
    }

    displayHashTable(hashTable, m);

    int keyToSearch;
    printf("\nEnter a key to search: ");
    scanf("%d", &keyToSearch);

    int result = search(hashTable, m, keyToSearch);
    if (result != -1) {
        printf("Key %d found at slot %d.\n", keyToSearch, result);
    } else {
        printf("Key %d not found in the hash table.\n", keyToSearch);
    }

    return 0;
}

