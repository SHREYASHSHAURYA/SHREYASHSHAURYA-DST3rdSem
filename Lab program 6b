#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void push(struct Node** top, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = *top;  
    *top = newNode;     
}

int pop(struct Node** top) {
    if (*top == NULL) {
        printf("Stack is empty!\n");
        return -1;  
    }
    struct Node* temp = *top;
    int poppedValue = temp->data;
    *top = (*top)->next;  
    free(temp);          
    return poppedValue;
}

int peek(struct Node* top) {
    if (top == NULL) {
        printf("Stack is empty!\n");
        return -1;
    }
    return top->data;
}

void enqueue(struct Node** front, struct Node** rear, int data) {
    struct Node* newNode = createNode(data);
    if (*rear == NULL) {
        *front = *rear = newNode; 
        return;
    }
    (*rear)->next = newNode;  
    *rear = newNode;         
}

int dequeue(struct Node** front, struct Node** rear) {
    if (*front == NULL) {
        printf("Queue is empty!\n");
        return -1; 
    }
    struct Node* temp = *front;
    int dequeuedValue = temp->data;
    *front = (*front)->next; 
    if (*front == NULL) {
        *rear = NULL;  
    }
    free(temp); 
    return dequeuedValue;
}

int front(struct Node* front) {
    if (front == NULL) {
        printf("Queue is empty!\n");
        return -1;
    }
    return front->data;
}

void displayList(struct Node* head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    struct Node* stackTop = NULL;     
    struct Node* queueFront = NULL;    
    struct Node* queueRear = NULL;   
    int choice, value;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Stack: Push\n");
        printf("2. Stack: Pop\n");
        printf("3. Stack: Peek\n");
        printf("4. Queue: Enqueue\n");
        printf("5. Queue: Dequeue\n");
        printf("6. Queue: Front\n");
        printf("7. Display Stack\n");
        printf("8. Display Queue\n");
        printf("9. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to push onto the stack: ");
                scanf("%d", &value);
                push(&stackTop, value);
                break;
            case 2:
                value = pop(&stackTop);
                if (value != -1) {
                    printf("Popped value from stack: %d\n", value);
                }
                break;
            case 3:
                value = peek(stackTop);
                if (value != -1) {
                    printf("Top value of stack: %d\n", value);
                }
                break;
            case 4:
                printf("Enter value to enqueue into the queue: ");
                scanf("%d", &value);
                enqueue(&queueFront, &queueRear, value);
                break;
            case 5:
                value = dequeue(&queueFront, &queueRear);
                if (value != -1) {
                    printf("Dequeued value from queue: %d\n", value);
                }
                break;
            case 6:
                value = front(queueFront);
                if (value != -1) {
                    printf("Front value of queue: %d\n", value);
                }
                break;
            case 7:
                printf("Stack contents: ");
                displayList(stackTop);
                break;
            case 8:
                printf("Queue contents: ");
                displayList(queueFront);
                break;
            case 9:
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
