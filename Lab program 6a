#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertAtEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

void displayList(struct Node* head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }
    struct Node* temp = head;
    printf("List contents: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

void sortList(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return; 
    }
    
    struct Node* i = head;
    struct Node* j = NULL;
    int temp;
    
    while (i != NULL) {
        j = i->next;
        while (j != NULL) {
            if (i->data > j->data) {

                temp = i->data;
                i->data = j->data;
                j->data = temp;
            }
            j = j->next;
        }
        i = i->next;
    }
}

void reverseList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev; 
        prev = current;      
        current = next;
    }
    *head = prev; 
}

void concatenateLists(struct Node** head1, struct Node* head2) {
    if (*head1 == NULL) {
        *head1 = head2;
        return;
    }
    struct Node* temp = *head1;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = head2; 
}

int main() {
    struct Node* list1 = NULL;
    struct Node* list2 = NULL;
    int choice, value;

    while (1) {
        printf("\nSingly Linked List Operations:\n");
        printf("1. Insert a node in the first list\n");
        printf("2. Insert a node in the second list\n");
        printf("3. Sort the first list\n");
        printf("4. Reverse the first list\n");
        printf("5. Concatenate the second list to the first list\n");
        printf("6. Display the first list\n");
        printf("7. Display the second list\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to insert in the first list: ");
                scanf("%d", &value);
                insertAtEnd(&list1, value);
                break;

            case 2:
                printf("Enter value to insert in the second list: ");
                scanf("%d", &value);
                insertAtEnd(&list2, value);
                break;

            case 3:
                sortList(list1);
                printf("The first list has been sorted.\n");
                break;

            case 4:
                reverseList(&list1);
                printf("The first list has been reversed.\n");
                break;

            case 5:
                concatenateLists(&list1, list2);
                printf("The second list has been concatenated to the first list.\n");
                break;

            case 6:
                displayList(list1);
                break;

            case 7:
                displayList(list2);
                break;

            case 8:
                exit(0);

            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
