#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

struct Node* insert(struct Node* root, int data) {
   
    if (root == NULL) {
        return createNode(data);
    }

    if (data < root->data) {
        root->left = insert(root->left, data); 
    } else if (data > root->data) {
        root->right = insert(root->right, data);      }
    
    return root;
}

void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);     
        printf("%d ", root->data);  
        inorder(root->right); 
    }
}

void preorder(struct Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);  
        preorder(root->left);      
        preorder(root->right);     
    }
}

void postorder(struct Node* root) {
    if (root != NULL) {
        postorder(root->left);     
        postorder(root->right);   
        printf("%d ", root->data); 
    }
}

void displayTree(struct Node* root) {
    printf("\nIn-order traversal: ");
    inorder(root);
    
    printf("\nPre-order traversal: ");
    preorder(root);
    
    printf("\nPost-order traversal: ");
    postorder(root);
}

int main() {
    struct Node* root = NULL;
    int numNodes, data;

    printf("Enter the number of nodes to insert in the BST: ");
    scanf("%d", &numNodes);

    for (int i = 0; i < numNodes; i++) {
        printf("Enter data for node %d: ", i + 1);
        scanf("%d", &data);
        root = insert(root, data);  
    }

    displayTree(root);

    return 0;
}
