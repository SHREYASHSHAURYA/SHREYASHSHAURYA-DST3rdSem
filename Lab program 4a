#include<stdio.h>
#include<stdlib.h>

struct node {
    int data;
    struct node *next;
};

struct node *start = NULL;

struct node *createll(struct node *);
struct node *display(struct node *);
struct node *insert_beg(struct node *);
struct node *insert_end(struct node *);
struct node *insert_before(struct node *);
struct node *insert_after(struct node *);

int main() {
    int option;
   
    do {
        printf("\n 1. Create a list");
        printf("\n 2. Display the list");
        printf("\n 3. Add a node at the beginning");
        printf("\n 4. Add a node at the end ");
        printf("\n 5. Add a node before a given node");
        printf("\n 6. Add a node after a given node");
        printf("\n 7: EXIT");
        printf("\n Enter your option: ");
        scanf("%d", &option);

        switch (option) {
            case 1:
                start = createll(start);
                printf("\n Linked list created\n");
                break;
            case 2:
                start = display(start);
                break;
            case 3:
                start = insert_beg(start);
                break;
            case 4:
                start = insert_end(start);
                break;
            case 5:
                start = insert_before(start);
                break;
            case 6:
                start = insert_after(start);
                break;
            case 7:
                printf("\n Exiting program.\n");
                break;
            default:
                printf("\n Invalid option. Try again.\n");
                break;
        }
    } while (option != 7);

    return 0;
}

struct node *createll(struct node *start) {
    struct node *new_node, *ptr;
    int num;
    printf("\n Enter -1 to end\n");
    printf(" Enter the data: ");
    scanf("%d", &num);

    while (num != -1) {
        new_node = (struct node*) malloc(sizeof(struct node));
        new_node->data = num;

        if (start == NULL) {
            new_node->next = NULL;
            start = new_node;
        } else {
            ptr = start;
            while (ptr->next != NULL) {
                ptr = ptr->next;
            }
            ptr->next = new_node;
            new_node->next = NULL;
        }

        printf(" Enter the data: ");
        scanf("%d", &num);
    }

    return start;
}

struct node *display(struct node *start) {
    struct node *ptr = start;

    if (start == NULL) {
        printf("\n The list is empty.\n");
        return start;
    }

    printf("\n List: ");
    while (ptr != NULL) {
        printf("\t %d", ptr->data);
        ptr = ptr->next;
    }
    printf("\n");

    return start;
}

struct node *insert_beg(struct node *start) {
    struct node *new_node;
    int num;

    printf("\n Enter the data: ");
    scanf("%d", &num);

    new_node = (struct node*) malloc(sizeof(struct node));
    new_node->data = num;
    new_node->next = start;
    start = new_node;

    return start;
}

struct node *insert_end(struct node *start) {
    struct node *ptr, *new_node;
    int num;

    printf("\n Enter the data: ");
    scanf("%d", &num);

    new_node = (struct node*) malloc(sizeof(struct node));
    new_node->data = num;
    new_node->next = NULL;

    if (start == NULL) {
        start = new_node;
    } else {
        ptr = start;
        while (ptr->next != NULL) {
            ptr = ptr->next;
        }
        ptr->next = new_node;
    }

    return start;
}

struct node *insert_before(struct node *start) {
    struct node *new_node, *ptr, *preptr;
    int num, val;

    printf("\n Enter the data: ");
    scanf("%d", &num);
    printf("\n Enter the value before which the data has to be inserted: ");
    scanf("%d", &val);

    new_node = (struct node*) malloc(sizeof(struct node));
    new_node->data = num;

    ptr = start;
    preptr = NULL;

    while (ptr != NULL && ptr->data != val) {
        preptr = ptr;
        ptr = ptr->next;
    }

    if (ptr == NULL) {
        printf("\n Value not found in the list.\n");
        return start;
    }

    if (preptr == NULL) {
        new_node->next = start;
        start = new_node;
    } else {
        preptr->next = new_node;
        new_node->next = ptr;
    }

    return start;
}

struct node *insert_after(struct node *start) {
    struct node *new_node, *ptr;
    int num, val;

    printf("\n Enter the data: ");
    scanf("%d", &num);
    printf("\n Enter the value after which the data has to be inserted: ");
    scanf("%d", &val);

    new_node = (struct node*) malloc(sizeof(struct node));
    new_node->data = num;

    ptr = start;

    while (ptr != NULL && ptr->data != val) {
        ptr = ptr->next;
    }

    if (ptr == NULL) {
        printf("\n Value not found in the list.\n");
        return start;
    }

    new_node->next = ptr->next;
    ptr->next = new_node;

    return start;
}
